{"version":3,"sources":["components/shares/Loading/Loading.js","components/shares/withSuspense/withSuspense.js","components/shares/index.js","stores/AdvesaApi.js","stores/index.js","components/index.js","pages/home/home.js","utils/helpers.js","pages/404/404.js","App.router.js","App.js","serviceWorker.js","index.js","utils/constants.js"],"names":["LoadingSpinner","className","src","alt","withSuspense","InnerComponent","forwardRef","props","ref","fallback","Loading","forwardedRef","configure","enforeActions","AdvesaApi","stateUser","MOBX_STATE","pending","statePost","keyword","_users","_posts","this","_setStates","axios","all","get","API_URL","then","users","posts","runInAction","data","done","catch","error","state","fUsers","filter","user","name","toLowerCase","includes","length","fPosts","post","title","body","decorate","observable","computed","getUsersAndPosts","action","filterPosts","rootStore","advesaApi","ListPosts","lazy","SearchField","HomePage","useState","setKeyword","searchRef","useRef","handleSubmit","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","debounce","current","value","store","Page404","React","Component","AppRouter","exact","path","component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","ReactDOM","render","basename","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"qHAUeA,EARQ,WACtB,OACC,yBAAKC,UAAU,kBACd,yBAAKC,IAAI,cAAcC,IAAI,OCSfC,EAXM,SAACC,GAQpB,OAPkBC,sBAAW,SAACC,EAAOC,GACnC,OACE,kBAAC,WAAD,CAAUC,SAAU,kBAACC,EAAD,OAClB,kBAACL,EAAD,iBAAoBE,EAApB,CAA2BI,aAAcH,UCPjD,qE,gOCKAI,YAAU,CAAEC,cAAe,a,IAErBC,E,iDACJC,UAAYC,IAAWC,Q,KACvBC,UAAYF,IAAWC,Q,KACvBE,QAAU,G,KAEVC,OAAS,G,KACTC,OAAS,G,+DAYW,IAAD,OACjBC,KAAKF,OAAS,GACdE,KAAKD,OAAS,GACdC,KAAKC,WAAWP,IAAWC,SAE3BO,IAAMC,IAAI,CACRD,IAAME,IAAN,UAAaC,IAAb,WACAH,IAAME,IAAN,UAAaC,IAAb,aACCC,MACD,YAAqB,IAAD,mBAAlBC,EAAkB,KAAXC,EAAW,KAClBC,aAAY,WACV,EAAKX,OAASS,EAAMG,MAAQ,GAC5B,EAAKX,OAASS,EAAME,MAAQ,GAC5B,EAAKb,QAAU,GACf,EAAKI,WAAWP,IAAWiB,YAG/BC,OACA,SAAAC,GACEJ,aAAY,WACV,EAAKR,WAAWP,IAAWmB,e,iCAMxBC,GACTd,KAAKP,UAAYqB,EACjBd,KAAKJ,UAAYkB,I,6BAtCL,IAAD,OACPC,EAASf,KAAKF,OAAOkB,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,cAAcC,SAAS,EAAKvB,YAC9E,OAAOkB,EAAOM,OAAS,EAAIN,EAASf,KAAKF,S,6BAG7B,IAAD,OACPwB,EAAStB,KAAKD,OAAOiB,QAAO,SAAAO,GAAI,OAAIA,EAAKC,MAAML,cAAcC,SAAS,EAAKvB,UAAY0B,EAAKE,KAAKN,cAAcC,SAAS,EAAKvB,YACjI,OAAOyB,EAAOD,OAAS,EAAIC,EAAStB,KAAKD,W,KAmC7C2B,YAASlC,EAAW,CAClBK,QAAS8B,IACTlC,UAAWkC,IACX/B,UAAW+B,IACXZ,OAAQa,IACRN,OAAQM,IACRC,iBAAkBC,IAClBC,YAAaD,MAGAtC,QCzDAwC,EAFG,IALhB,aAAe,oBACbhC,KAAKiC,UAAY,IAAIzC,G,gBCDnB0C,EAAYpD,YAAaqD,gBAAK,kBAAM,wDACpCC,EAActD,YAAaqD,gBAAK,kBAAM,+DCmB7BE,EAhBE,WAAO,IAAD,EACSC,mBAAS,IADlB,mBACdzC,EADc,KACL0C,EADK,KAEfC,EAAYC,mBAEZC,ECXgB,SAACC,EAAMC,EAAMC,GACpC,IAAIC,EACJ,OAAO,WACN,IAAIC,EAAU/C,KAAMgD,EAAOC,UACvBC,EAAQ,WACXJ,EAAU,KACLD,GAAWF,EAAKQ,MAAMJ,EAASC,IAEjCI,EAAUP,IAAcC,EAC5BO,aAAaP,GACbA,EAAUQ,WAAWJ,EAAON,GACxBQ,GAAST,EAAKQ,MAAMJ,EAASC,IDAZO,EAAS,WAC5BhB,EAAWC,EAAUgB,QAAQC,SAC7B,KAEF,OAAO,kBAAC,IAAD,CAAUC,MAAO1B,GACtB,yBAAKrD,UAAU,QACb,kBAACyD,EAAD,CAAalD,IAAKsD,EAAWE,aAAcA,IAC3C,kBAACR,EAAD,CAAWrC,QAASA,O,wBEhBL8D,E,iLAEjB,OAAO,yBAAKhF,UAAU,wBAAf,mB,GAF0BiF,IAAMC,WCS5BC,EAPG,kBAChB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAW5B,IACjC,kBAAC,IAAD,CAAO4B,UAAWN,MCGPO,MANf,WACE,OACE,kBAAC,EAAD,O,QCMEC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTpE,MAAK,SAAAyE,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBnE,QACf8D,UAAUC,cAAcO,YAI1BC,QAAQC,IACN,iHAKEX,GAAUA,EAAOY,UACnBZ,EAAOY,SAASR,KAMlBM,QAAQC,IAAI,sCAGRX,GAAUA,EAAOa,WACnBb,EAAOa,UAAUT,WAO5BnE,OAAM,SAAAC,GACLwE,QAAQxE,MAAM,4CAA6CA,M,MCvFjE4E,IAASC,OACP,kBAAC,IAAD,CAAeC,SAHwC,WAIrD,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDSjB,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIkB,IAAIC,UAAwB1B,OAAOC,SAAS0B,MACpDC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,QAAQ,WAC9B,IAAMxB,EAAK,UAAMqB,UAAN,gBAEP5B,IAgEV,SAAiCO,EAAOC,GAEtCwB,MAAMzB,GACHpE,MAAK,SAAA8F,GAEJ,IAAMC,EAAcD,EAASE,QAAQlG,IAAI,gBAEnB,MAApBgG,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAMnG,MAAK,SAAAyE,GACjCA,EAAa2B,aAAapG,MAAK,WAC7B+D,OAAOC,SAASqC,eAKpBlC,EAAgBC,EAAOC,MAG1B/D,OAAM,WACLyE,QAAQC,IACN,oEArFAsB,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAMnG,MAAK,WACjC+E,QAAQC,IACN,iHAMJb,EAAgBC,EAAOC,OChC/BE,I,+BClBA,wEAAMxE,EAAU,uCACVX,EAAa,CACjBiB,KAAM,OACNE,MAAO,QACPlB,QAAS,a","file":"static/js/main.1bdba55f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst LoadingSpinner = () => {\r\n\treturn (\r\n\t\t<div className=\"advesa-loading\">\r\n\t\t\t<img src=\"loading.svg\" alt=''></img>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default LoadingSpinner;","import React, { Suspense, forwardRef } from 'react';\r\nimport { LoadingSpinner } from 'components/shares';\r\n\r\nconst withSuspense = (InnerComponent) => {\r\n  const Component = forwardRef((props, ref) => {\r\n    return (\r\n      <Suspense fallback={<LoadingSpinner/>}>\r\n        <InnerComponent {...props} forwardedRef={ref}/>\r\n      </Suspense>\r\n    );\r\n  });\r\n  return Component;\r\n}\r\n\r\nexport default withSuspense;","import LoadingSpinner from './Loading/Loading';\r\nimport withSuspense from './withSuspense/withSuspense';\r\n\r\nexport {\r\n    LoadingSpinner,\r\n    withSuspense\r\n}","import { observable, action, \r\n\tconfigure, runInAction, decorate, computed } from \"mobx\";\r\nimport { API_URL, MOBX_STATE } from 'utils/constants';\r\nimport axios from \"axios\";\r\n\r\nconfigure({ enforeActions: \"observed\" })\r\n\r\nclass AdvesaApi {\r\n  stateUser = MOBX_STATE.pending;\r\n  statePost = MOBX_STATE.pending;\r\n  keyword = '';\r\n  \r\n  _users = [];\r\n  _posts = [];\r\n\r\n  get fUsers() {\r\n    let fUsers = this._users.filter(user => user.name.toLowerCase().includes(this.keyword));\r\n    return fUsers.length > 0 ? fUsers : this._users;\r\n  }\r\n\r\n  get fPosts() {\r\n    let fPosts = this._posts.filter(post => post.title.toLowerCase().includes(this.keyword) || post.body.toLowerCase().includes(this.keyword));\r\n    return fPosts.length > 0 ? fPosts : this._posts;\r\n  }\r\n\r\n  getUsersAndPosts() {\r\n    this._users = [];\r\n    this._posts = [];\r\n    this._setStates(MOBX_STATE.pending);\r\n\r\n    axios.all([\r\n      axios.get(`${API_URL}/users`),\r\n      axios.get(`${API_URL}/posts`)\r\n    ]).then(\r\n      ([users, posts]) => {\r\n        runInAction(() => {\r\n          this._users = users.data || [];\r\n          this._posts = posts.data || [];\r\n          this.keyword = '';\r\n          this._setStates(MOBX_STATE.done);\r\n        })\r\n      }\r\n    ).catch(\r\n      error => {\r\n        runInAction(() => {\r\n          this._setStates(MOBX_STATE.error);\r\n        })\r\n      }\r\n    );\r\n  }\r\n\r\n  _setStates(state) {\r\n    this.stateUser = state;\r\n    this.statePost = state;\r\n  }\r\n}\r\n\r\ndecorate(AdvesaApi, {\r\n  keyword: observable,\r\n  stateUser: observable,\r\n  statePost: observable,\r\n  fUsers: computed,\r\n  fPosts: computed,\r\n  getUsersAndPosts: action,\r\n  filterPosts: action\r\n});\r\n\r\nexport default AdvesaApi\r\n\r\n","import AdvesaApi from './AdvesaApi';\r\n\r\nclass RootStore {\r\n  constructor() {\r\n    this.advesaApi = new AdvesaApi();\r\n  }\r\n}\r\n\r\nconst rootStore = new RootStore();\r\n\r\nexport default rootStore;","import { lazy } from 'react';\r\nimport { withSuspense } from './shares';\r\n\r\nconst ListPosts = withSuspense(lazy(() => import('./ListPosts/ListPosts')));\r\nconst SearchField = withSuspense(lazy(() => import('./SearchField/SearchField')));\r\n\r\nexport {\r\n  ListPosts,\r\n  SearchField\r\n}","import React, { useRef, useState } from 'react';\r\nimport rootStore from 'stores';\r\nimport { Provider } from 'mobx-react';\r\nimport { debounce } from 'utils/helpers';\r\n\r\nimport { ListPosts, SearchField } from 'components';\r\n\r\nconst HomePage = () => {\r\n  const [keyword, setKeyword] = useState('');\r\n  const searchRef = useRef();\r\n\r\n  const handleSubmit = debounce(() => {\r\n    setKeyword(searchRef.current.value);\r\n  },250);\r\n\r\n  return <Provider store={rootStore}>\r\n    <div className=\"home\">\r\n      <SearchField ref={searchRef} handleSubmit={handleSubmit}/>\r\n      <ListPosts keyword={keyword}/>\r\n    </div>\r\n  </Provider>\r\n};\r\n\r\nexport default HomePage;","export const debounce = (func, wait, immediate) => {\r\n\tvar timeout;\r\n\treturn function() {\r\n\t\tvar context = this, args = arguments;\r\n\t\tvar later = function() {\r\n\t\t\ttimeout = null;\r\n\t\t\tif (!immediate) func.apply(context, args);\r\n\t\t};\r\n\t\tvar callNow = immediate && !timeout;\r\n\t\tclearTimeout(timeout);\r\n\t\ttimeout = setTimeout(later, wait);\r\n\t\tif (callNow) func.apply(context, args);\r\n\t};\r\n};","import React from 'react';\r\n\r\nexport default class Page404 extends React.Component {\r\n  render() {\r\n    return <div className=\"page-404 flex-center\">\r\n      No Matching\r\n    </div>\r\n  }\r\n}","import React from 'react';\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport { HomePage, Page404 } from \"pages\";\r\n\r\nconst AppRouter = () => (\r\n  <Switch>\r\n    <Route exact path=\"/\" component={HomePage} />\r\n    <Route component={Page404} />\r\n  </Switch>\r\n)\r\n\r\nexport default AppRouter;","import React from 'react';\nimport 'App.scss';\nimport AppRouter from 'App.router';\n\nfunction App() {\n  return (\n    <AppRouter/>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/customSW.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\nimport 'styles/styles.scss';\n\nconst basename = process.env.NODE_ENV === 'production' ? '/advesa' : '';\n\nReactDOM.render(\n  <BrowserRouter basename={basename}>\n    <App/>\n  </BrowserRouter>,\ndocument.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","const API_URL = 'https://jsonplaceholder.typicode.com';\r\nconst MOBX_STATE = {\r\n  done: 'DONE',\r\n  error: 'ERROR',\r\n  pending: 'PENDING'\r\n}\r\n      \r\nexport {\r\n  API_URL,\r\n  MOBX_STATE\r\n};"],"sourceRoot":""}